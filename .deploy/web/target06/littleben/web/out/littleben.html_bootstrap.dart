import "dart:html" as AB;import "dart:isolate" as gC;import "dart:async" as QC;import "dart:collection" as bB;class RC{static const  SC="Chrome";final  NC;final  minimumVersion;const RC(this.NC,[this.minimumVersion]);}class TC{const TC();}class UC{final  name;const UC(this.name);}class VC{const VC();}class WC{const WC();}final NB=new l();var OB; get iB{if(rB){sB(NB,t.PB,'currentTime');}return OB;}set iB( g){if(qB(NB)){tB(NB,t.PB,'currentTime',OB,g);}OB=g;} jB(){var g=new Duration(seconds:1);new QC.Timer.periodic(g,cB);cB(null);} cB( kC){var g=new DateTime.now();iB=kB(g.hour,g.minute,g.second);} kB( g, h, i){if(g>12){g=g-12;}var j=(h<=9)?'0${h}':'${h}';var k=(i<=9)?'0${i}':'${i}';return '${g}:${j}:${k}';} lB(){var lC=AB.document.body;var mC;var nC=new ZC(lC);mC=lC.nodes[3];var oC=nC.OC(()=>iB,false);mC.nodes.addAll([new AB.Text('\n      The current time is: '),oC,new AB.Text('\n    ')]);nC.XB();nC.insert();}main(){gB=true;jB();lB();}typedef  s( e);typedef  mB( changes);typedef  BB();typedef  nB();class KB{final oldValue;final newValue;final  changes;KB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is KB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>DC(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class t{static const PB=1;static const QB=2;static const dB=QB|4;static const eB=QB|8;final  type;final key;final oldValue;final newValue;t(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is t&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>EC(type,key,oldValue,newValue); toString(){var g;switch (type){case PB:g='field';break;case QB:g='index';break;case dB:g='insert';break;case eB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} oB(g, i,[ k]){if(g is l){var h=g;return RB(h,(q){i(new KB(h,h,q));});}var j=new LB(g,i,k);if(!j.pC()){return uB;}return j.qC;} RB( g, i){if(g.EB==null)g.EB=new SB();var h=g.EB.add(i);return h.remove;}class l{var EB;var DB;final  hashCode= ++l.pB;static var pB=0;} qB( g)=>g.EB!=null&&g.EB.head!=null; get rB=>CB!=null; sB( g, h,i)=>CB.rC(g,h,i); tB( g, j,k, h, i){if((j&(t.dB|t.eB))==0){if(h==i)return;}if(u==null){u=[] ;FC(vB);}if(g.DB==null){g.DB=[] ;u.add(g);}g.DB.add(new t(j,k,h,i));} uB(){}var CB;var fB=100;var u;var v; vB(){var q=0;while (u!=null||v!=null){var j=u;u=null;var i=v;v=null;if(q++ ==fB){wB(j,i);return;}if(j!=null){for(var h in j){var JB=h.DB;h.DB=null;for(var g=h.EB.head;g!=null;g=g.next){var k=g.value;try {k(JB);}catch (aB,w){FB(aB,w,k,'from ${h}');}}}}if(i!=null){i.forEach((fC,ZB){ZB.sC();});}}} wB( k, j){var g=[] ;if(k!=null){for(var i in k){var JB=i.DB;g.add('${i} ${JB}');}}if(j!=null){for(var q in j.values){var h=q.sC();if(h!=null)g.add('${q} ${h}');}}u=null;v=null;var w='exceeded notifiction limit of ${fB}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';zB(w);}class LB{static var xB=0;final  tC= ++LB.xB;final  uC;final  vC;final  wC;final  xC=new Map();final  yC=[] ;var zC=false;var AD;LB(this.uC,this.vC,this.wC); toString()=>wC!=null?'<observer ${tC}: ${wC}>':'<observer ${tC}>'; pC(){var h=CB;CB=this;try {AD=uC();if(AD is Iterable&&AD is !List&&AD is !l){AD=(AD as Iterable).toList();}}catch (g,i){FB(g,i,uC,'from ${this}');AD=null;}xC.forEach(BD);xC.clear();assert(CB==this);CB=h;CD();return yC.length>0;} DD( i){try {vC(i);}catch (g,h){FB(g,h,vC,'from ${this}');}} CD(){var g=AD;if(g is !l)return;yC.add(RB(g,(h){DD(new KB(g,g,h));}));} rC( q, w,g){var i=xC.putIfAbsent(q,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|w;}catch (j,k){FB(j,k,g,'hashCode or operator == from ${this}');}} BD( i, j){yC.add(RB(i,(k){if(zC)return;for(var g in k){var h=j[g.key];if(h!=null&&(h&g.type)!=0){zC=true;if(v==null){v=new bB.SplayTreeMap();}v[tC]=this;return;}}}));} qC(){for(var g in yC){g();}zC=false;} sC(){if(!zC)return null;var g=AD;qC();pC();try {if(g==AD)return null;}catch (i,j){FB(i,j,g,'operator == from ${this}');return null;}var h=new KB(g,AD);DD(h);return h;}}typedef  yB( message);var zB=(g)=>print(g);typedef  AC(error,stackTrace,obj, message);var FB=BC; BC(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class CC{}class n<o>{var ED;var FD;var GD;var HD;n.hC( g,this.GD):HD=g{if(GD!=null)GD.ID++ ;} get next=>FD; get value=>HD;set value( g)=>HD=g; JD( g, h){FD=h;ED=g;if(g!=null)g.FD=this;if(h!=null)h.ED=this;return this;} append( g)=>new n<o>.hC(g,GD).JD(this,FD); remove(){if(GD==null)return;GD.ID-- ;if(ED!=null){ED.FD=FD;}else{GD.KD=FD;}if(FD!=null){FD.ED=ED;}else{GD.LD=ED;}FD=null;ED=null;GD=null;}}class SB<o> extends bB.IterableBase<o>{var KD;var LD; get length=>ID;var ID=0;SB(){} get head=>KD; add( h){var g=new n<o>.hC(h,this);if(LD==null)return KD=LD=g;return LD=g.JD(LD,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new XC<o>(this);}class XC<o> implements Iterator<o>{var MD;var GD;var ND;var OD=-1;XC(this.GD){MD=new List<n>(GD.length);var h=0;var g=GD.head;while (g!=null){MD[h++ ]=g;g=g.next;}} get current=>ND; moveNext(){do{OD++ ;}while(OD<MD.length&&MD[OD].GD!=GD);if(OD<MD.length){ND=MD[OD].value;return true;}else{ND=null;return false;}}}GB(h,g)=>h.hashCode*31+g.hashCode;DC(h,g,i)=>GB(GB(h,g),i);EC(g,i,h,j)=>GB(GB(g,i),GB(h,j)); FC( h()){var g=new gC.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);} GC(i, g,[ h]){var j=i is CC;if(h==null){h=i.toString();}if(!j&&g is AB.Text){g.text=h;}else{var k=g;g=j?new AB.Element.html(h):new AB.Text(h);k.replaceWith(g);}return g;}abstract class TB{ XB(){} insert(); remove();}class YC extends TB{final exp;final  action;final  isFinal;var MB;YC(this.exp,this.action,this.isFinal); insert(){if(isFinal){action(new KB(null,exp()));}else if(MB!=null){throw new StateError('binding already attached');}else{MB=JC(exp,action,'generic-binding');}} remove(){if(!isFinal){MB();MB=null;}}}class ZC extends TB{final  PC;final  children=[] ;final  nodes=[] ;ZC(this.PC); OC( h,i){var g=new AB.Text('');children.add(new YC(()=>'${h()}',(j){g=GC(h(),g,j.newValue);},i));return g;} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); XB(){for(var g=0,h=children.length;g<h;g++ ){children[g].XB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var gB=false; HC(g, q,[ k]){if(gB)return oB(g,q);if(q==null)return (){};if(UB==null)UB=new SB<HB>();var i;var h=m.MC;if(g is hB){i=(g as hB).PD;}else if(g is Function){i=g;try {var j=g();if(j is List){h=m.IB;}else if(j is Iterable){h=m.IB;i=()=>g().toList();}else if((j is bB.LinkedHashMap)||(j is bB.SplayTreeMap)){h=m.WB;}else if(j is Map){h=m.VB;}}catch (JB,ZB){print('error: evaluating ${k!=null?k:"<unnamed>"} ' 'watcher threw error (${JB}, ${ZB})');}}else if(g is List){i=()=>g;h=m.IB;}else if(g is Iterable){i=()=>g.toList();h=m.IB;}else if((g is bB.LinkedHashMap)||(g is bB.SplayTreeMap)){i=()=>g;h=m.WB;}else if(g is Map){i=()=>g;h=m.VB;}var w=IC(h,i,q,k);var aB=UB.add(w);return aB.remove;} IC( j, g, i, h){switch (j){case m.IB:return new aC(g,i,h);case m.WB:return new eC(g,i,h);case m.VB:return new bC(g,i,h);default:return new HB(g,i,h);}} JC(h,i,[j]){var k=HC(h,i,j);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new KB(null,g));return k;}var UB;class HB{final  YB;final  PD;final  QD;var RD;HB(this.PD,this.QD,this.YB){RD=PD();} toString()=>YB==null?'<unnamed>':YB; SD(g){RD=g;}TD(){try {return PD();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return RD;}}typedef  KC<LC>();class hB<LC>{}class aC<LC> extends HB{aC(g, i, h):super(g,i,h){SD(TD());} SD(g){RD=new List<LC>.from(g);}}class bC<cC,dC> extends HB{bC(g, i, h):super(g,i,h){SD(TD());} SD(g){RD=new Map<cC,dC>.from(g);}}class eC<cC,dC> extends HB{eC(g, i, h):super(g,i,h){SD(TD());} SD(g){RD=new bB.LinkedHashMap.from(g);}}class m{final UD;const m.iC(this.UD);toString()=>'Enum.${UD}';static const IB=const m.iC('LIST');static const VB=const m.iC('HASH_MAP');static const WB=const m.iC('ORDERED_MAP');static const MC=const m.iC('OTHER');}//@ sourceMappingURL=littleben.html_bootstrap.dart.map
